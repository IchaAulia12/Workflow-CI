# -*- coding: utf-8 -*-
"""modelling_tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hRctkEAC5kCKPj9qd0L8rLDHFplMuaLZ
"""
import mlflow
import mlflow.sklearn
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    accuracy_score,
    precision_score,
    recall_score,
    f1_score,
    classification_report,
    confusion_matrix,
)


mlflow.set_tracking_uri(os.environ['MLFLOW_TRACKING_URI'])
os.environ["MLFLOW_TRACKING_USERNAME"] = os.environ["MLFLOW_TRACKING_USERNAME"]
os.environ["MLFLOW_TRACKING_PASSWORD"] = os.environ["MLFLOW_TRACKING_PASSWORD"]
mlflow.set_experiment("student-passed-classifier")


df = pd.read_csv('StudentsPerformance_cleaned.csv')

df['passed'] = ((df['math score'] >= 50) &
                (df['reading score'] >= 50) &
                (df['writing score'] >= 50)).astype(int)

X = df.drop(columns=['math score', 'reading score', 'writing score', 'passed'])
y = df['passed']
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

with mlflow.start_run(run_name="baseline_rf_model"):

    model = RandomForestClassifier(n_estimators=100, max_depth=4, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred)
    rec = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    # Log parameter dan metrik
    mlflow.log_param("n_estimators", 100)
    mlflow.log_param("max_depth", 4)
    mlflow.log_metric("accuracy", acc)
    mlflow.log_metric("precision", prec)
    mlflow.log_metric("recall", rec)
    mlflow.log_metric("f1_score", f1)

    # Save dan log confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(5, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.title("Confusion Matrix")
    plt.tight_layout()
    plt.savefig("confusion_matrix.png")
    mlflow.log_artifact("confusion_matrix.png")

    # Log dan (opsional) register model
    mlflow.sklearn.log_model(model, artifact_path="rf_model_passed_classifier")

params = [10, 50, 100]
for n in params:
    with mlflow.start_run(run_name=f"tuning_n_{n}"):
        model = RandomForestClassifier(n_estimators=n, random_state=42)
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        acc = accuracy_score(y_test, y_pred)
        report = classification_report(y_test, y_pred, output_dict=True)

        mlflow.log_param("n_estimators", n)
        mlflow.log_metric("accuracy", acc)
        mlflow.log_metric("precision_0", report["0"]["precision"])
        mlflow.log_metric("recall_1", report["1"]["recall"])

        mlflow.sklearn.log_model(model, "model_rf")

os.makedirs("artifacts", exist_ok=True)
joblib.dump(model, "artifacts/model.pkl")